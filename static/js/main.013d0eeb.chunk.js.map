{"version":3,"sources":["utils/z-score.ts","App.tsx","utils/FillGradientChunk.tsx","index.tsx"],"names":["data","name","uv","pv","amt","redZoneFor","xs","xsZScore","xsStdDev","stdDev","xsMean","mean","bound1","bound2","zScoreOf","x","bounds","upper","Math","max","lower","min","zScore","zScoreFor","sorted","sort","a","b","isInRedZone","abs","length","App","pvsRedZone","map","uvsRedZone","pvZIndexDeviationHighlight","highlightYDeviation","uvZIndexDeviationHighlight","_jsx","_Fragment","children","ResponsiveContainer","width","height","_jsxs","LineChart","margin","top","accessibilityLayer","gradient","CartesianGrid","strokeDasharray","XAxis","dataKey","padding","left","right","YAxis","Tooltip","Legend","Line","type","stroke","lineStroke","dot","activeDot","props","deviationColor","mainColor","minY","maxY","minAllowed","maxAllowed","gradientId","getY","console","log","fillChunk","primaryColor","highlightColor","size","start","end","offset","stopColor","stopOpacity","fillLinearGradientChunk","normalize","n","id","x1","y1","x2","y2","y","payload","isDeviation","Dot","fill","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.013d0eeb.chunk.js","sourcesContent":["import { mean, stdDev } from '@mathigon/fermat'\n\nconst zScore = (mean: number, stdDev: number) => (x: number) => (x - mean) / stdDev\n\nexport type CalculatedZScore = {\n  zScoreOf(x: number): number,\n  bounds: ZScoreBounds,\n}\nexport type ZScoreBounds = {\n  upper: number, // any x ABOVE this value will have |z-score| > 1\n  lower: number, // any x BELOW this value will have |z-score| > 1\n}\nexport const zScoreFor = (\n  xs: number[],\n): CalculatedZScore => {\n  const xsStdDev = stdDev(xs)\n  const xsMean = mean(xs)\n  const bound1 = xsStdDev + xsMean\n  const bound2 = xsMean - xsStdDev\n  return {\n    zScoreOf: zScore(xsMean, xsStdDev),\n    bounds: {\n      upper: Math.max(bound1,bound2),\n      lower: Math.min(bound1,bound2),\n    }\n  }\n}","import \"./styles.css\";\nimport { ReactElement } from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Dot,\n} from \"recharts\";\nimport { fillLinearGradientChunk } from \"./utils/FillGradientChunk\";\nimport { CalculatedZScore, zScoreFor } from \"./utils/z-score\";\n\nconst data = [\n  {\n    name: \"Page A\",\n    uv: 4000,\n    pv: 2400,\n    amt: 2400,\n  },\n  {\n    name: \"Page B\",\n    uv: 3000,\n    pv: 1398,\n    amt: 2210,\n  },\n  {\n    name: \"Page C\",\n    uv: 2000,\n    pv: 9800,\n    amt: 2290,\n  },\n  {\n    name: \"Page D\",\n    uv: 2780,\n    pv: 3908,\n    amt: 2000,\n  },\n  {\n    name: \"Page E\",\n    uv: 1890,\n    pv: 4800,\n    amt: 2181,\n  },\n  {\n    name: \"Page F\",\n    uv: 2390,\n    pv: 3800,\n    amt: 2500,\n  },\n  {\n    name: \"Page G\",\n    uv: 3490,\n    pv: 4300,\n    amt: 2100,\n  },\n];\n\n\nconst redZoneFor = (xs: number[]): {\n  zScore: CalculatedZScore,\n  isInRedZone: (x: number) => boolean,\n  bounds: {\n    min: number,\n    max: number,\n  },\n} => {\n  const xsZScore = zScoreFor(xs)\n  const sorted = xs.sort((a,b) => a - b)\n  return {\n    zScore: xsZScore,\n    isInRedZone: x => Math.abs(xsZScore.zScoreOf(x)) > 1,\n    bounds: {\n      min: sorted[0] || 0,\n      max: sorted[sorted.length - 1] || 0,\n    }\n  }}\n\nexport default function App() {\n  const pvsRedZone = redZoneFor(data.map(x => x.pv))\n  const uvsRedZone = redZoneFor(data.map(x => x.uv))\n\n  const pvZIndexDeviationHighlight = highlightYDeviation<typeof data[number]>(\n    'red',\n    '#8884d8',\n    pvsRedZone.bounds.min,\n    pvsRedZone.bounds.max,\n    pvsRedZone.zScore.bounds.lower,\n    pvsRedZone.zScore.bounds.upper,\n    'zScoreLinePv',\n    x => x.pv,\n  )\n  const uvZIndexDeviationHighlight = highlightYDeviation<typeof data[number]>(\n    'red',\n    '#82ca9d',\n    uvsRedZone.bounds.min,\n    uvsRedZone.bounds.max,\n    uvsRedZone.zScore.bounds.lower,\n    uvsRedZone.zScore.bounds.upper,\n    'zScoreLineUv',\n    x => x.uv,\n  )\n  return (<>\n    <ResponsiveContainer width={\"100%\"} height={300}>\n      <LineChart data={data} margin={{ top: 20 }} accessibilityLayer>\n        <defs>\n          {pvZIndexDeviationHighlight.gradient}\n          {uvZIndexDeviationHighlight.gradient}\n        </defs>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" padding={{ left: 30, right: 30 }} />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Line\n          type=\"monotone\"\n          dataKey=\"pv\"\n          stroke={pvZIndexDeviationHighlight.lineStroke}\n          dot={pvZIndexDeviationHighlight.dot}\n          activeDot={(props: any) =>\n            pvZIndexDeviationHighlight.activeDot(props)}\n        />\n        <Line\n          type=\"monotone\"\n          dataKey=\"uv\"\n          stroke={uvZIndexDeviationHighlight.lineStroke}\n          dot={uvZIndexDeviationHighlight.dot}\n          activeDot={(props: any) =>\n            uvZIndexDeviationHighlight.activeDot(props)}\n        />\n      </LineChart>\n    </ResponsiveContainer>\n  </>);\n}\n\n// Highlighting out-of-bounds line areas and points\n\ntype HighlightYDeviation<Payload> = {\n  gradient: ReactElement,\n  lineStroke: string,\n  dot: (props: {payload: Payload}) => ReactElement,\n  activeDot: (props: {payload: Payload}) => ReactElement,\n}\nconst highlightYDeviation = <Payload,>(\n  deviationColor: string,\n  mainColor: string,\n  minY: number,\n  maxY: number,\n  minAllowed: number,\n  maxAllowed: number,\n  gradientId: string,\n  getY: (payload: Payload) => number,\n): HighlightYDeviation<Payload> => {\n  console.log(\n    minY,\n    maxY,\n    minAllowed,\n    maxAllowed,\n  )\n  const fillChunk = fillLinearGradientChunk(\n    deviationColor,\n    mainColor,\n    Math.abs(maxY - minY),\n  )\n  const normalize = (n: number) => Math.abs(n - minY)\n  return {\n    gradient:\n      <linearGradient id={gradientId} x1={0} y1={1} x2={0} y2={0}>\n        {fillChunk(normalize(minAllowed), normalize(maxAllowed))}\n      </linearGradient>,\n    lineStroke: `url(#${gradientId})`,\n    dot: (props: any & {payload: Payload}) => {\n      // exposed type does not reflect actual props being passed\n      // into 'Dot' in 'Line.renderDots'\n      const y = getY(props.payload)\n      const isDeviation = y > maxAllowed || y < minAllowed\n      return <Dot\n        {...props}\n        fill={isDeviation ? \"red\" : \"white\"}\n        stroke={isDeviation ? \"red\" : mainColor}\n      />\n    },\n    activeDot: (props: any & {payload: Payload}) => {\n      const y = getY(props.payload)\n      const isDeviation = y > maxAllowed || y < minAllowed\n      return <Dot\n        {...props}\n        fill={isDeviation ? \"red\" : mainColor}\n      />\n    },\n  }\n}","\n// Fill a chunk of 'linearGradient' to be filled with specified color\nexport const fillLinearGradientChunk =\n  (primaryColor: string, highlightColor: string, size: number) =>\n  (start: number, end: number) => <>\n    <stop offset={start/size} stopColor={primaryColor} stopOpacity={1}/>\n    <stop offset={start/size} stopColor={highlightColor} stopOpacity={1}/>\n    <stop offset={end/size} stopColor={highlightColor} stopOpacity={1}/>\n    <stop offset={end/size} stopColor={primaryColor} stopOpacity={1}/>\n  </>","import { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}